// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "transport.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message RpcRequest
 */
export interface RpcRequest {
  /**
   * @generated from protobuf field: string interface = 1;
   */
  interface: string;
  /**
   * @generated from protobuf field: string method = 2;
   */
  method: string;
  /**
   * @generated from protobuf field: bytes payload = 3;
   */
  payload: Uint8Array;
}
/**
 * @generated from protobuf message RpcResponse
 */
export interface RpcResponse {
  /**
   * @generated from protobuf field: ArgonRpcStatusCode statusCode = 1;
   */
  statusCode: ArgonRpcStatusCode;
  /**
   * @generated from protobuf field: bytes payload = 2;
   */
  payload: Uint8Array;
  /**
   * @generated from protobuf field: optional string exceptionType = 3;
   */
  exceptionType?: string;
  /**
   * @generated from protobuf field: optional string errorMessage = 4;
   */
  errorMessage?: string;
}
/**
 * @generated from protobuf message StreamPayload
 */
export interface StreamPayload {
  /**
   * @generated from protobuf field: bytes payload = 2;
   */
  payload: Uint8Array;
}
/**
 * @generated from protobuf enum ArgonRpcStatusCode
 */
export enum ArgonRpcStatusCode {
  /**
   * @generated from protobuf enum value: Ok = 0;
   */
  Ok = 0,
  /**
   * @generated from protobuf enum value: InternalException = 1;
   */
  InternalException = 1,
  /**
   * @generated from protobuf enum value: NotAuthorized = 2;
   */
  NotAuthorized = 2,
  /**
   * @generated from protobuf enum value: InsufficientPermission = 3;
   */
  InsufficientPermission = 3,
}
// @generated message type with reflection information, may provide speed optimized methods
class RpcRequest$Type extends MessageType<RpcRequest> {
  constructor() {
    super("RpcRequest", [
      { no: 1, name: "interface", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<RpcRequest>): RpcRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.interface = "";
    message.method = "";
    message.payload = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<RpcRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RpcRequest
  ): RpcRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string interface */ 1:
          message.interface = reader.string();
          break;
        case /* string method */ 2:
          message.method = reader.string();
          break;
        case /* bytes payload */ 3:
          message.payload = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: RpcRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string interface = 1; */
    if (message.interface !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.interface);
    /* string method = 2; */
    if (message.method !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.method);
    /* bytes payload = 3; */
    if (message.payload.length)
      writer.tag(3, WireType.LengthDelimited).bytes(message.payload);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message RpcRequest
 */
export const RpcRequest = new RpcRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RpcResponse$Type extends MessageType<RpcResponse> {
  constructor() {
    super("RpcResponse", [
      {
        no: 1,
        name: "statusCode",
        kind: "enum",
        T: () => ["ArgonRpcStatusCode", ArgonRpcStatusCode],
      },
      { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      {
        no: 3,
        name: "exceptionType",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "errorMessage",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<RpcResponse>): RpcResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.statusCode = 0;
    message.payload = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<RpcResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RpcResponse
  ): RpcResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* ArgonRpcStatusCode statusCode */ 1:
          message.statusCode = reader.int32();
          break;
        case /* bytes payload */ 2:
          message.payload = reader.bytes();
          break;
        case /* optional string exceptionType */ 3:
          message.exceptionType = reader.string();
          break;
        case /* optional string errorMessage */ 4:
          message.errorMessage = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: RpcResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* ArgonRpcStatusCode statusCode = 1; */
    if (message.statusCode !== 0)
      writer.tag(1, WireType.Varint).int32(message.statusCode);
    /* bytes payload = 2; */
    if (message.payload.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
    /* optional string exceptionType = 3; */
    if (message.exceptionType !== undefined)
      writer.tag(3, WireType.LengthDelimited).string(message.exceptionType);
    /* optional string errorMessage = 4; */
    if (message.errorMessage !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.errorMessage);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message RpcResponse
 */
export const RpcResponse = new RpcResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamPayload$Type extends MessageType<StreamPayload> {
  constructor() {
    super("StreamPayload", [
      { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<StreamPayload>): StreamPayload {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.payload = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<StreamPayload>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: StreamPayload
  ): StreamPayload {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes payload */ 2:
          message.payload = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: StreamPayload,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bytes payload = 2; */
    if (message.payload.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message StreamPayload
 */
export const StreamPayload = new StreamPayload$Type();
/**
 * @generated ServiceType for protobuf service ArgonTransport
 */
export const ArgonTransport = new ServiceType("ArgonTransport", [
  { name: "Unary", options: {}, I: RpcRequest, O: RpcResponse },
  {
    name: "BroadcastSubscribe",
    serverStreaming: true,
    options: {},
    I: RpcRequest,
    O: StreamPayload,
  },
  {
    name: "BiDirectSubscribe",
    serverStreaming: true,
    clientStreaming: true,
    options: {},
    I: RpcRequest,
    O: StreamPayload,
  },
]);
