// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "transport.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { StreamPayload } from "./transport";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RpcResponse } from "./transport";
import type { RpcRequest } from "./transport";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
import { ArgonTransport } from "./transport";
/**
 * @generated from protobuf service ArgonTransport
 */
export interface IArgonTransportClient {
  /**
   * @generated from protobuf rpc: Unary(RpcRequest) returns (RpcResponse);
   */
  unary(
    input: RpcRequest,
    options?: RpcOptions
  ): UnaryCall<RpcRequest, RpcResponse>;
  /**
   * @generated from protobuf rpc: BroadcastSubscribe(RpcRequest) returns (stream StreamPayload);
   */
  broadcastSubscribe(
    input: RpcRequest,
    options?: RpcOptions
  ): ServerStreamingCall<RpcRequest, StreamPayload>;
  /**
   * @generated from protobuf rpc: BiDirectSubscribe(stream RpcRequest) returns (stream StreamPayload);
   */
  biDirectSubscribe(
    options?: RpcOptions
  ): DuplexStreamingCall<RpcRequest, StreamPayload>;
}
/**
 * @generated from protobuf service ArgonTransport
 */
export class ArgonTransportClient
  implements IArgonTransportClient, ServiceInfo
{
  typeName = ArgonTransport.typeName;
  methods = ArgonTransport.methods;
  options = ArgonTransport.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Unary(RpcRequest) returns (RpcResponse);
   */
  unary(
    input: RpcRequest,
    options?: RpcOptions
  ): UnaryCall<RpcRequest, RpcResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<RpcRequest, RpcResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: BroadcastSubscribe(RpcRequest) returns (stream StreamPayload);
   */
  broadcastSubscribe(
    input: RpcRequest,
    options?: RpcOptions
  ): ServerStreamingCall<RpcRequest, StreamPayload> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<RpcRequest, StreamPayload>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * @generated from protobuf rpc: BiDirectSubscribe(stream RpcRequest) returns (stream StreamPayload);
   */
  biDirectSubscribe(
    options?: RpcOptions
  ): DuplexStreamingCall<RpcRequest, StreamPayload> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<RpcRequest, StreamPayload>(
      "duplex",
      this._transport,
      method,
      opt
    );
  }
}
